import os
import yaml
from pathlib import Path
from datetime import datetime

# --- Configuration ---
WORKFLOWS_DIR = Path("C:/EGOS/.windsurf/workflows")
OUTPUT_FILE = Path("C:/EGOS/docs/workflows_index.md")
# Make sure the output directory exists
OUTPUT_FILE.parent.mkdir(parents=True, exist_ok=True)

# --- Helper Functions ---
def read_front_matter(file_path):
    """Reads YAML front matter from a Markdown file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if content.startswith('---'):
                end_fm = content.find('---', 3)
                if end_fm != -1:
                    fm_text = content[3:end_fm]
                    return yaml.safe_load(fm_text)
    except Exception as e:
        print(f"Error reading front matter from {file_path}: {e}")
    return {}

def format_list(data_list):
    """Formats a list into a comma-separated string or returns 'N/A'."""
    if data_list and isinstance(data_list, list):
        return ", ".join(sorted(data_list))
    return "N/A"

# --- Main Script Logic ---
def main():
    workflow_files = sorted([f for f in WORKFLOWS_DIR.glob('*.md') if f.is_file()])
    workflows_data = []

    for wf_file in workflow_files:
        front_matter = read_front_matter(wf_file)
        if front_matter:
            # Create a relative path for the link in the markdown file
            # Assuming OUTPUT_FILE is in C:/EGOS/docs/ and WORKFLOWS_DIR is C:/EGOS/.windsurf/workflows/
            # The link should be ../.windsurf/workflows/filename.md
            relative_link = f"../.windsurf/workflows/{wf_file.name}"
            
            workflows_data.append({
                "name": wf_file.stem,
                "description": front_matter.get('description', 'N/A'),
                "categories": format_list(front_matter.get('categories')),
                "requires": format_list(front_matter.get('requires')),
                "link": relative_link
            })

    # --- Generate Markdown Output ---
    md_content = []
    md_content.append(f"# EGOS Workflows Index\n")
    md_content.append(f"*Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n\n")
    md_content.append("This index provides an overview of all defined EGOS workflows, their purpose, categorization, and dependencies.\n")
    md_content.append("It is automatically generated by `generate_workflow_index.py`.\n\n")

    md_content.append("| Workflow File | Description | Categories | Requires Subsystems |")
    md_content.append("|---------------|-------------|------------|---------------------|")

    for wf_data in sorted(workflows_data, key=lambda x: x['name']):
        md_content.append(
            f"| [{wf_data['name']}]({wf_data['link']}) | "
            f"{wf_data['description']} | "
            f"{wf_data['categories']} | "
            f"{wf_data['requires']} |"
        )
    
    md_content.append("\n\n---\n*End of Index*")

    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write("\n".join(md_content))
        print(f"Successfully generated workflow index: {OUTPUT_FILE}")
    except Exception as e:
        print(f"Error writing output file {OUTPUT_FILE}: {e}")

if __name__ == "__main__":
    main()
