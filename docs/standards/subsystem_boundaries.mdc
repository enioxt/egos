---
description: (Describe rule purpose - Guidelines for defining clear boundaries and responsibilities between EGOS subsystems)
globs: [] # Applies conceptually
alwaysApply: true
---
---
description: Enforce subsystem boundaries and interface-based communication (Mycelium)
globs: ["subsystems/**/*.py"]
# Potentially add excludes later if needed, e.g., !subsystems/SHARED_UTILS/**/*.py
alwaysApply: true # Core architectural principle
---

# Subsystem Interaction Boundaries (KOIOS Standard)

## Rule

Subsystems **MUST NOT** directly import Python code (`.py` files) from another subsystem's `core/`, `services/`, or other internal implementation directories.

Interaction between subsystems **MUST** primarily occur through well-defined interfaces, principally via **Mycelium Network messages and topics**.

Imports from a dedicated `subsystems/SHARED_UTILS/` directory (if created for genuinely common, stable utilities) **are permissible**, but should be used sparingly to avoid creating a monolithic shared dependency.

## Rationale

This rule is **critical** for maintaining modularity, reducing tight coupling, and enabling independent development and testing of subsystems. Direct imports create hidden dependencies that break easily and violate the EGOS architectural principles (NEXUS). Mycelium provides a stable, decoupled communication layer.

## Examples

### Correct Usage (Mycelium Interaction or Shared Utils)

```python
# In subsystems/NEXUS/services/analyzer_service.py

# Correct: Importing Mycelium interface to send messages
from subsystems.MYCELIUM.core.interface import MyceliumInterface

# Correct: Importing a shared utility (if SHARED_UTILS exists)
# from subsystems.SHARED_UTILS.common_data_structures import SpecificStructure

class AnalyzerService:
    def __init__(self, mycelium_interface: MyceliumInterface):
        self.mycelium = mycelium_interface

    async def request_ethik_validation(self, data_to_validate: dict):
        """Sends data to ETHIK for validation via Mycelium."""
        # Correct: Publishing a message to ETHIK via Mycelium
        topic = "request.ethik.validate"
        payload = {"data": data_to_validate}
        self.logger.info(f"Publishing validation request to {topic}")
        await self.mycelium.publish(topic, payload)
        # (May need to await a response on a different topic)

```

### Incorrect Usage (Direct Cross-Subsystem Import)

```python
# In subsystems/NEXUS/core/analyzer.py (Example - DO NOT DO THIS)

# Incorrect: Direct import from ETHIK's core implementation
# from subsystems.ETHIK.core.validator import EthikValidator

class Analyzer:
    def analyze(self, code_snippet: str):
        """Analyzes code and tries to validate directly."""
        # Incorrect: Directly instantiating/calling another subsystem's core component
        # validator = EthikValidator()
        # is_valid = validator.validate(code_snippet)
        # ...
        # This creates tight coupling and bypasses defined interfaces.
        pass
```

**Use Mycelium messages (or clearly defined shared interfaces) to request actions or data from other subsystems.**
