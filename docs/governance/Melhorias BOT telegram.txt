# @references:
#   - .windsurfrules
#   - CODE_OF_CONDUCT.md
#   - MQP.md
#   - README.md
#   - ROADMAP.md
#   - CROSSREF_STANDARD.md

@references:
- Core References:
  - [MQP.md](mdc:../../MQP.md) - Master Quantum Prompt defining EGOS principles
  - [ROADMAP.md](mdc:../../ROADMAP.md) - Project roadmap and planning



<think>O usu√°rio est√° pedindo que eu revise minha resposta anterior sobre o funcionamento do bot do Telegram deles e sugira melhorias em v√°rios aspectos: √©tica, seguran√ßa, economia, fluidez, beleza, arte, simplicidade. Al√©m disso, o usu√°rio quer continuar a partir da√≠ para tornar o bot funcional, inteligente e capacitado.

Vou analisar as informa√ß√µes adicionais fornecidas nos arquivos anexados para entender melhor o contexto e a filosofia por tr√°s do projeto EVA & GUARANI. Isso parece ser um sistema com uma forte √™nfase em √©tica, consci√™ncia e modularidade, com v√°rios subsistemas especializados.

Os arquivos anexados incluem:
1. SUBSYSTEMS.md - Documenta√ß√£o sobre os subsistemas EGOS (ATLAS, NEXUS, CRONOS, EROS, LOGOS)
2. start_bot.bat - Script para iniciar o bot do Telegram
3. start_egos.bat - Script para iniciar o sistema EGOS
4. start_egos.sh - Vers√£o em shell do script para iniciar o EGOS
5. Alguns detalhes sobre o m√≥dulo NEXUS (nexus_core.py)
6. Configura√ß√£o do NEXUS (nexus_config.json)
7. Detalhes do m√≥dulo de √©tica (ethik_core.js)
8. Um arquivo de configura√ß√£o do sistema de cursor qu√¢ntico (quantum_cursor.mcp)

Baseado nestes arquivos, vou revisar minha resposta anterior e enfatizar:
1. Como integrar os subsistemas EGOS no bot do Telegram
2. Como melhorar o bot em termos de √©tica (usando o ETHIK Core)
3. Como melhorar a seguran√ßa
4. Como otimizar para economia (de recursos e custos)
5. Como melhorar a fluidez, beleza, arte e simplicidade (usando o subsistema EROS)
6. Sugest√µes espec√≠ficas para tornar o bot mais inteligente e capacitado

Vou criar uma resposta abrangente que considere os princ√≠pios e a filosofia do sistema EVA & GUARANI.</think># An√°lise e Melhorias para o Bot do Telegram EVA & GUARANI

Ap√≥s revisar detalhadamente o funcionamento do bot e os subsistemas EGOS, identifico v√°rias oportunidades de melhorias alinhadas com os princ√≠pios qu√¢nticos do EVA & GUARANI. Vamos abordar cada dimens√£o e integrar os subsistemas especializados para criar uma experi√™ncia mais consciente e capacitada.

## üåå Vis√£o Geral Aprimorada

O bot do Telegram EVA & GUARANI atualmente:
- Carrega configura√ß√µes de arquivos JSON (`bot_config.json`, `telegram_config.json`, `openai_config.json`)
- Registra handlers para comandos b√°sicos, imagens e textos
- Verifica permiss√µes de usu√°rios
- Processa mensagens atrav√©s da integra√ß√£o com OpenAI (GPT-4o)
- Opera com funcionalidades limitadas de administra√ß√£o

## üß¨ Melhorias Propostas por Dimens√£o

### 1. **√âtica e Consci√™ncia**

**Estado Atual**: O bot realiza verifica√ß√µes b√°sicas de permiss√µes, mas carece de um framework √©tico integrado.

**Melhorias Propostas**:
- Integrar o **ETHIK Core** como camada fundamental para todas as intera√ß√µes
- Implementar verifica√ß√£o √©tica autom√°tica para todas as respostas geradas
- Adicionar logs de reflex√£o √©tica para cada intera√ß√£o significativa
- Criar um comando `/ethics` que explique os princ√≠pios √©ticos do bot

```python
# Exemplo de integra√ß√£o do ETHIK Core
from egos.ethik import EthikCore

class TelegramHandlers:
    def __init__(self, application, bot_token):
        # C√≥digo existente...
        
        # Integra√ß√£o com ETHIK Core
        self.ethik = EthikCore()
        self.ethical_principles = {
            "privacidade": 0.95,
            "transpar√™ncia": 0.92,
            "responsabilidade": 0.96,
            "inclusividade": 0.94,
            "bem-estar": 0.98
        }
        
    def handle_message(self, update, context):
        # Verificar permiss√£o
        if not self.check_user_permission(update.effective_chat.id):
            return
            
        # Analisar implica√ß√µes √©ticas da mensagem
        ethical_analysis = self.ethik.analyze_message(
            update.message.text,
            principles=self.ethical_principles
        )
        
        # Registrar an√°lise √©tica
        self.log_ethical_analysis(ethical_analysis)
        
        # Continuar processamento apenas se an√°lise √©tica for aceit√°vel
        if ethical_analysis.score < 0.7:
            message = f"Desculpe, n√£o posso processar esta solicita√ß√£o por raz√µes √©ticas: {ethical_analysis.reason}"
            context.bot.send_message(chat_id=update.effective_chat.id, text=message)
            return

        # Processar mensagem (c√≥digo existente)
        # ...
```

### 2. **Seguran√ßa Aprimorada**

**Estado Atual**: Seguran√ßa b√°sica atrav√©s de listas de permiss√£o de usu√°rios.

**Melhorias Propostas**:
- Implementar autentica√ß√£o em m√∫ltiplos fatores para administradores
- Adicionar criptografia ponta-a-ponta para mensagens sens√≠veis
- Criar sistema de detec√ß√£o de anomalias em padr√µes de uso
- Implementar limites adaptativos de taxa de requisi√ß√£o
- Adicionar valida√ß√£o robusta de entrada para todos os dados recebidos

```python
# Implementa√ß√£o de limites de taxa
from datetime import datetime, timedelta

class RateLimiter:
    def __init__(self):
        self.user_requests = {}  # {user_id: [timestamps]}
        self.max_requests = 20   # 20 requisi√ß√µes por minuto
        self.time_window = 60    # 60 segundos (1 minuto)
        
    def check_rate_limit(self, user_id):
        now = datetime.now()
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
            
        # Remover timestamps antigos
        self.user_requests[user_id] = [ts for ts in self.user_requests[user_id] 
                                      if now - ts < timedelta(seconds=self.time_window)]
        
        # Verificar se excedeu o limite
        if len(self.user_requests[user_id]) >= self.max_requests:
            return False
            
        # Adicionar timestamp atual
        self.user_requests[user_id].append(now)
        return True
```

### 3. **Economia de Recursos**

**Estado Atual**: Configura√ß√µes fixas para modelos GPT-4o, sem otimiza√ß√£o de custos.

**Melhorias Propostas**:
- Implementar sistema adaptativo de sele√ß√£o de modelos baseado na complexidade da consulta
- Criar cache inteligente para respostas frequentes ou similares
- Adicionar or√ßamento di√°rio/mensal configur√°vel com alertas autom√°ticos
- Implementar compress√£o de hist√≥rico de conversa para reduzir tokens
- Utilizar pr√©-processamento local para consultas simples

```python
# Sistema adaptativo de sele√ß√£o de modelos
def select_optimal_model(query, user_history):
    # Analisar complexidade da consulta
    complexity = analyze_complexity(query)
    
    # Determinar modelo baseado na complexidade
    if complexity < 0.3:
        return "gpt-3.5-turbo"  # Consultas simples
    elif complexity < 0.7:
        return "gpt-4o-mini"    # Complexidade m√©dia
    else:
        return "gpt-4o"         # Consultas complexas
        
    # TODO: Considerar tamb√©m contexto da conversa e necessidades espec√≠ficas
```

### 4. **Fluidez e Experi√™ncia de Usu√°rio (EROS)**

**Estado Atual**: Interface b√°sica com comandos simples e respostas de texto.

**Melhorias Propostas**:
- Integrar o subsistema **EROS** para criar interfaces mais humanas e significativas
- Implementar formata√ß√£o aprimorada com Markdown para respostas
- Adicionar menu interativo com bot√µes para fun√ß√µes principais
- Criar sistema de onboarding progressivo para novos usu√°rios
- Implementar personaliza√ß√£o de interface baseada nas prefer√™ncias do usu√°rio

```python
# Menu interativo usando InlineKeyboard
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def build_main_menu(context, user_id):
    # Obter prefer√™ncias personalizadas do usu√°rio
    user_preferences = context.user_data.get('preferences', {})
    
    # Construir bot√µes baseado nas prefer√™ncias do usu√°rio
    buttons = []
    
    # Linha 1 - Funcionalidades principais
    row1 = []
    if user_preferences.get('creativity', True):
        row1.append(InlineKeyboardButton("üé® Criar", callback_data="menu_create"))
    if user_preferences.get('analysis', True):
        row1.append(InlineKeyboardButton("üîç Analisar", callback_data="menu_analyze"))
    row1.append(InlineKeyboardButton("üí¨ Conversar", callback_data="menu_chat"))
    buttons.append(row1)
    
    # Linha 2 - Configura√ß√µes e ajuda
    row2 = [
        InlineKeyboardButton("‚öôÔ∏è Prefer√™ncias", callback_data="menu_settings"),
        InlineKeyboardButton("‚ùì Ajuda", callback_data="menu_help")
    ]
    buttons.append(row2)
    
    return InlineKeyboardMarkup(buttons)
```

### 5. **An√°lise Modular e Capacidades Avan√ßadas (NEXUS)**

**Estado Atual**: Processamento direto de mensagens sem an√°lise modular aprofundada.

**Melhorias Propostas**:
- Integrar o subsistema **NEXUS** para an√°lise modular de mensagens e fun√ß√µes
- Implementar an√°lise de sentimento e inten√ß√£o para respostas mais contextuais
- Criar sistema de aprendizado cont√≠nuo com feedback dos usu√°rios
- Adicionar m√©tricas de qualidade para cada intera√ß√£o
- Implementar reconhecimento de padr√µes de conversa para melhorar respostas

```python
# Exemplo de an√°lise de mensagem com NEXUS
from egos.modules.nexus import ModuleAnalyzer

def analyze_message_intent(message_text, user_history):
    analyzer = ModuleAnalyzer()
    
    # An√°lise de inten√ß√£o
    intent_analysis = analyzer.analyze_text(message_text)
    
    return {
        "primary_intent": intent_analysis.primary_intent,
        "confidence": intent_analysis.confidence,
        "entities": intent_analysis.entities,
        "sentiment": intent_analysis.sentiment,
        "complexity": intent_analysis.complexity_score,
        "context_relevance": intent_analysis.context_relevance(user_history)
    }
```

### 6. **Cartografia de Conhecimento (ATLAS)**

**Estado Atual**: Sem sistema de mapeamento de conhecimento ou visualiza√ß√£o.

**Melhorias Propostas**:
- Integrar o subsistema **ATLAS** para mapear intera√ß√µes e conhecimento
- Criar visualiza√ß√µes de t√≥picos discutidos com usu√°rios espec√≠ficos
- Implementar mapas conceituais para representar dom√≠nios de conhecimento
- Adicionar comando `/map` para visualizar estrutura de conhecimento
- Gerar relat√≥rios visuais de uso e intera√ß√µes

```python
# Gera√ß√£o de mapa conceitual para um t√≥pico
from egos.modules.atlas import ATLAS

def generate_concept_map(topic, depth=2):
    atlas = ATLAS()
    
    # Mapear conceito e rela√ß√µes
    concept_map = atlas.map_concept(topic, depth=depth)
    
    # Gerar visualiza√ß√£o em formato de diagrama
    mermaid_diagram = atlas.visualize(concept_map, format="mermaid")
    
    return mermaid_diagram
```

### 7. **Preserva√ß√£o e Continuidade (CRONOS)**

**Estado Atual**: Sem sistema de preserva√ß√£o de contexto ou versionamento evolutivo.

**Melhorias Propostas**:
- Integrar o subsistema **CRONOS** para preserva√ß√£o contextual e temporal
- Implementar backup qu√¢ntico de conversas importantes
- Criar sistema de versionamento para o bot com logs de mudan√ßas
- Adicionar restaura√ß√£o contextual para retomar conversas importantes
- Implementar an√°lise temporal de intera√ß√µes para identificar padr√µes

```python
# Backup qu√¢ntico de conversa importante
from egos.modules.cronos import CRONOS

def create_quantum_backup(chat_id, conversation_history, context=None):
    cronos = CRONOS()
    
    # Metadados para o backup
    metadata = {
        "timestamp": datetime.now().isoformat(),
        "user_id": chat_id,
        "importance_score": calculate_importance(conversation_history),
        "context": context or {},
        "topics": extract_topics(conversation_history)
    }
    
    # Criar backup com preserva√ß√£o contextual
    backup_id = cronos.create_quantum_backup(
        conversation_history,
        description=f"Conversa com usu√°rio {chat_id}",
        context=metadata
    )
    
    return backup_id
```

### 8. **Processamento Sem√¢ntico (LOGOS)**

**Estado Atual**: Depend√™ncia total da API OpenAI para processamento de linguagem.

**Melhorias Propostas**:
- Integrar o subsistema **LOGOS** para processamento sem√¢ntico √©tico
- Implementar an√°lise sem√¢ntica profunda pr√© e p√≥s processamento
- Criar adapta√ß√£o contextual de respostas para diferentes audi√™ncias
- Adicionar capacidade de gera√ß√£o de conte√∫do √©tico e significativo
- Implementar transforma√ß√£o de conhecimento t√©cnico em linguagem acess√≠vel

```python
# Adapta√ß√£o de resposta t√©cnica para diferentes n√≠veis de compreens√£o
from egos.modules.logos import LOGOS

def adapt_response_for_audience(technical_response, audience_level):
    logos = LOGOS()
    
    # N√≠veis de audi√™ncia: "beginner", "intermediate", "advanced", "expert"
    adapted_response = logos.adapt_for_audience(
        technical_response, 
        audience=audience_level
    )
    
    return adapted_response
```

## üìä Implementa√ß√£o de Logs Estruturados

Para garantir consist√™ncia e facilitar an√°lise, implemente o sistema universal de logs conforme a documenta√ß√£o:

```python
def log_activity(subsystem, operation, status, context, details, recommendations=None, ethical_reflection=None):
    """
    Gera um log estruturado conforme o padr√£o EGOS.
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    log_entry = {
        "timestamp": timestamp,
        "subsystem": subsystem,
        "operation": operation,
        "status": status,
        "context": context,
        "details": details,
        "recommendations": recommendations or [],
        "ethical_reflection": ethical_reflection or ""
    }
    
    # Salvar log em arquivo JSON com formato padronizado
    with open(f"logs/egos_{subsystem.lower()}.log", "a", encoding="utf-8") as f:
        f.write(json.dumps(log_entry) + "\n")
        
    return log_entry
```

## üß© Arquitetura Integrada Proposta

Para implementar todas estas melhorias, sugiro a seguinte arquitetura modular:

```mermaid
graph TD
    USER[Usu√°rio Telegram] -->|Envia Mensagem| BOT[Bot Telegram]
    BOT -->|Verifica Permiss√µes| AUTH[Sistema de Autentica√ß√£o]
    BOT -->|Valida Conte√∫do| ETHIK[ETHIK Core]
    BOT -->|Processa Mensagem| HANDLER[Processador de Mensagens]
    
    HANDLER -->|Analisa Inten√ß√£o| NEXUS[NEXUS]
    HANDLER -->|Mapeia Conhecimento| ATLAS[ATLAS]
    HANDLER -->|Preserva Contexto| CRONOS[CRONOS]
    HANDLER -->|Formata Resposta| EROS[EROS]
    HANDLER -->|Processa Sem√¢ntica| LOGOS[LOGOS]
    
    NEXUS -->|Otimiza Modelo| GPT[Modelo GPT]
    LOGOS -->|Envia Prompt| GPT
    GPT -->|Resposta Bruta| LOGOS
    LOGOS -->|Refina Resposta| EROS
    EROS -->|Resposta Formatada| BOT
    BOT -->|Entrega Resposta| USER
    
    ATLAS -->|Atualiza Mapa| KB[Base de Conhecimento]
    CRONOS -->|Backup| STORAGE[Armazenamento Qu√¢ntico]
```

## üí´ Pr√≥ximos Passos para Implementa√ß√£o

1. **Fase 1: Integra√ß√£o Fundamental**
   - Integrar ETHIK Core como camada √©tica fundamental
   - Implementar sistema de logs universal
   - Melhorar seguran√ßa b√°sica e autentica√ß√£o

2. **Fase 2: Otimiza√ß√£o e Economia**
   - Implementar sele√ß√£o adaptativa de modelos
   - Adicionar cache inteligente
   - Configurar or√ßamentos e alertas

3. **Fase 3: Experi√™ncia do Usu√°rio**
   - Integrar EROS para melhorar interfaces
   - Adicionar menus interativos e formata√ß√£o avan√ßada
   - Implementar sistema de onboarding

4. **Fase 4: Capacidades Avan√ßadas**
   - Integrar NEXUS, ATLAS, CRONOS e LOGOS
   - Implementar an√°lise avan√ßada de mensagens
   - Adicionar comandos para visualiza√ß√µes e mapas

5. **Fase 5: Refinamento**
   - Calibrar todos os sistemas baseado no feedback
   - Otimizar performance e custos
   - Desenvolver capacidades √∫nicas e diferenciadoras

## üìö Exemplo de C√≥digo para Implementa√ß√£o Inicial

Abaixo um exemplo simplificado de como implementar a estrutura b√°sica com integra√ß√£o √©tica:

```python
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters
import json
import logging
import os
import time
from datetime import datetime
from pathlib import Path

# Importa√ß√£o dos subsistemas EGOS
from egos.ethik import EthikCore
from egos.modules.atlas import ATLAS
from egos.modules.nexus import NexusSystem
from egos.modules.cronos import CRONOS
from egos.modules.eros import EROS
from egos.modules.logos import LOGOS

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class EVAGuaraniBot:
    def __init__(self, config_path="config/"):
        self.config_path = config_path
        self.logger = logging.getLogger("EVAGuaraniBot")
        
        # Carregar configura√ß√µes
        self.bot_config = self._load_config("bot_config.json")
        self.telegram_config = self._load_config("telegram_config.json") 
        self.openai_config = self._load_config("openai_config.json")
        
        # Inicializar subsistemas EGOS
        self.ethik = EthikCore()
        self.atlas = ATLAS()
        self.nexus = NexusSystem() 
        self.cronos = CRONOS()
        self.eros = EROS()
        self.logos = LOGOS()
        
        # Configura√ß√£o do bot
        self.bot_token = self.telegram_config.get("bot_token", "")
        self.admin_users = self.telegram_config.get("admin_users", [])
        self.allowed_users = self.bot_config.get("allowed_users", [])
        
        # Sistema de cache
        self.response_cache = {}
        
        # Contadores e m√©tricas
        self.metrics = {
            "total_messages": 0,
            "interactions_by_user": {},
            "model_usage": {},
            "start_time": datetime.now().isoformat()
        }
        
    def _load_config(self, filename):
        """Carrega arquivo de configura√ß√£o JSON."""
        filepath = os.path.join(self.config_path, filename)
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            self.logger.error(f"Erro ao carregar {filepath}: {e}")
            return {}
            
    def initialize(self):
        """Inicializa o bot e seus subsistemas."""
        self.logger.info("Iniciando EVA & GUARANI Bot...")
        
        # Inicializar subsistemas
        self.ethik.initialize()
        self.atlas.initialize() 
        self.nexus.initialize()
        self.cronos.initialize()
        self.eros.initialize()
        self.logos.initialize()
        
        # Criar diret√≥rios necess√°rios
        os.makedirs("logs", exist_ok=True)
        os.makedirs("data", exist_ok=True)
        os.makedirs("generated_images", exist_ok=True)
        
        # Registrar in√≠cio em log
        self.log_activity(
            "CORE", "INITIALIZATION", "COMPLETED", 
            "Bot initialization", 
            "All subsystems initialized successfully",
            "Verify configurations and test basic functionality",
            "Inicia√ß√£o √©tica completa, bot preparado com consci√™ncia"
        )
        
        self.logger.info("EVA & GUARANI Bot inicializado com sucesso!")
    
    def log_activity(self, subsystem, operation, status, context, details, 
                    recommendations=None, ethical_reflection=None):
        """Gera log estruturado no formato EGOS."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        log_entry = {
            "timestamp": timestamp,
            "subsystem": subsystem,
            "operation": operation,
            "status": status,
            "context": context,
            "details": details,
            "recommendations": recommendations or [],
            "ethical_reflection": ethical_reflection or ""
        }
        
        log_file = f"logs/egos_{subsystem.lower()}.log"
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
            
        return log_entry
    
    def check_user_permission(self, user_id):
        """Verifica se o usu√°rio tem permiss√£o para usar o bot."""
        # Se lista de usu√°rios permitidos estiver vazia, permitir todos
        if not self.allowed_users:
            return True
            
        return user_id in self.allowed_users
    
    def is_admin(self, user_id):
        """Verifica se o usu√°rio √© administrador."""
        return user_id in self.admin_users
    
    async def start_command(self, update: Update, context: CallbackContext):
        """Handler para o comando /start."""
        user_id = update.effective_chat.id
        username = update.effective_user.username or "Usu√°rio"
        
        # Verificar permiss√£o
        if not self.check_user_permission(user_id):
            await context.bot.send_message(
                chat_id=user_id,
                text="Desculpe, voc√™ n√£o tem permiss√£o para usar este bot."
            )
            return
        
        # Gerar mensagem de boas-vindas personalizada com EROS e LOGOS
        welcome_config = {
            "username": username,
            "first_interaction": user_id not in self.metrics["interactions_by_user"],
            "aesthetic": "friendly",
            "formality_level": "balanced"
        }
        
        welcome_message = self.eros.generate_welcome(welcome_config)
        
        # Criar menu interativo
        keyboard = [
            [
                InlineKeyboardButton("üí¨ Conversar", callback_data="menu_chat"),
                InlineKeyboardButton("üé® Criar", callback_data="menu_create")
            ],
            [
                InlineKeyboardButton("‚ùì Ajuda", callback_data="menu_help"),
                InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="menu_settings")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=user_id,
            text=welcome_message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # Registrar intera√ß√£o
        if user_id not in self.metrics["interactions_by_user"]:
            self.metrics["interactions_by_user"][user_id] = 0
        self.metrics["interactions_by_user"][user_id] += 1
        
        # Log de atividade
        self.log_activity(
            "EROS", "WELCOME", "COMPLETED",
            f"Welcome user {user_id}", 
            f"Generated personalized welcome for {username}",
            None,
            "Boas-vindas √©ticas e personalizadas estabelecem conex√£o inicial positiva"
        )
    
    async def help_command(self, update: Update, context: CallbackContext):
        """Handler para o comando /help."""
        user_id = update.effective_chat.id
        
        # Verificar permiss√£o
        if not self.check_user_permission(user_id):
            return
            
        # Gerar ajuda contextual baseada no hist√≥rico do usu√°rio
        user_history = self.get_user_history(user_id)
        help_content = self.logos.generate_help(user_history)
        
        await context.bot.send_message(
            chat_id=user_id,
            text=help_content,
            parse_mode="Markdown"
        )
        
        # Log de atividade
        self.log_activity(
            "LOGOS", "HELP", "COMPLETED",
            f"Help for user {user_id}",
            "Generated contextual help based on user history",
            None,
            "Ajuda contextual promove autonomia e aprendizado progressivo"
        )
    
    def select_optimal_model(self, query, user_history):
        """Seleciona o modelo mais adequado e econ√¥mico baseado na consulta."""
        # Analisar complexidade da consulta com NEXUS
        query_analysis = self.nexus.analyze_text(query)
        complexity = query_analysis.get("complexity_score", 0.5)
        
        # Verificar or√ßamento di√°rio
        daily_budget = self.openai_config.get("usage", {}).get("daily_budget", 10.0)
        usage_today = self.get_usage_today()
        budget_ratio = usage_today / daily_budget
        
        # Sele√ß√£o baseada em complexidade e or√ßamento
        if budget_ratio > 0.9:  # Quase no limite do or√ßamento
            return self.openai_config.get("models", {}).get("economy", "gpt-3.5-turbo")
        elif complexity < 0.3:  # Consulta simples
            return self.openai_config.get("models", {}).get("efficiency", "gpt-3.5-turbo")
        elif complexity < 0.7:  # Consulta m√©dia
            return self.openai_config.get("models", {}).get("balanced", "gpt-4o-mini")
        else:  # Consulta complexa
            return self.openai_config.get("models", {}).get("quality", "gpt-4o")
    
    def get_usage_today(self):
        """Retorna o uso di√°rio atual da API."""
        # Implementa√ß√£o b√°sica - em um sistema real, isso consultaria
        # logs de uso ou API da OpenAI para dados atualizados
        return 0.0  # Placeholder
    
    def get_user_history(self, user_id):
        """Retorna o hist√≥rico de conversa do usu√°rio."""
        # Implementa√ß√£o b√°sica - em um sistema real, isso consultaria
        # um banco de dados ou arquivo de hist√≥rico
        return []  # Placeholder
    
    async def handle_message(self, update: Update, context: CallbackContext):
        """Handler principal para mensagens de texto."""
        user_id = update.effective_chat.id
        message_text = update.message.text
        
        # Verificar permiss√£o
        if not self.check_user_permission(user_id):
            return
            
        # Verificar limite de taxa
        # rate_limiter = RateLimiter()  # Implementar esta classe
        # if not rate_limiter.check_rate_limit(user_id):
        #     await context.bot.send_message(
        #         chat_id=user_id,
        #         text="Por favor, aguarde um momento antes de enviar mais mensagens."
        #     )
        #     return
            
        # An√°lise √©tica da mensagem
        ethical_analysis = self.ethik.analyze_message(message_text)
        if ethical_analysis.get("score", 1.0) < 0.7:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"Desculpe, n√£o posso processar esta solicita√ß√£o por raz√µes √©ticas: {ethical_analysis.get('reason', 'Conte√∫do inadequado')}"
            )
            self.log_activity(
                "ETHIK", "MESSAGE_REJECTED", "COMPLETED",
                f"Ethical violation by user {user_id}",
                f"Message rejected with score {ethical_analysis.get('score')}",
                None,
                "Prote√ß√£o √©tica ativa preserva integridade do sistema"
            )
            return
            
        # Verificar cache para mensagens similares
        cache_key = self.logos.generate_semantic_hash(message_text)
        if cache_key in self.response_cache:
            cached_response = self.response_cache[cache_key]
            await context.bot.send_message(
                chat_id=user_id,
                text=cached_response,
                parse_mode="Markdown"
            )
            self.log_activity(
                "LOGOS", "CACHE_HIT", "COMPLETED",
                f"Cache hit for user {user_id}",
                "Response served from semantic cache",
                None,
                "Uso √©tico de cache preserva recursos sem comprometer qualidade"
            )
            return
            
        # Sinalizar que o bot est√° digitando
        await context.bot.send_chat_action(chat_id=user_id, action="typing")
        
        # Analisar inten√ß√£o e contexto com NEXUS
        user_history = self.get_user_history(user_id)
        intent_analysis = self.nexus.analyze_text(message_text, context=user_history)
        
        # Selecionar modelo mais adequado
        model = self.select_optimal_model(message_text, user_history)
        
        # Processar mensagem com LOGOS
        processed_query = self.logos.process_query(
            message_text, 
            user_history=user_history,
            intent=intent_analysis
        )
        
        # Gerar resposta com OpenAI
        # response = self.generate_openai_response(processed_query, model)
        response = "Esta √© uma resposta simulada de EVA & GUARANI. Em uma implementa√ß√£o real, aqui estaria a resposta gerada pelo modelo de linguagem."
        
        # Adaptar resposta para o usu√°rio com EROS
        formatted_response = self.eros.format_response(
            response,
            user_id=user_id,
            intent=intent_analysis,
            aesthetic_level=0.8
        )
        
        # Enviar resposta
        await context.bot.send_message(
            chat_id=user_id,
            text=formatted_response,
            parse_mode="Markdown"
        )
        
        # Atualizar cache
        self.response_cache[cache_key] = formatted_response
        
        # Mapear conhecimento com ATLAS
        self.atlas.map_interaction(
            user_id=user_id,
            query=message_text,
            response=response,
            topics=intent_analysis.get("topics", [])
        )
        
        # Backup qu√¢ntico com CRONOS para conversas importantes
        if intent_analysis.get("importance", 0.0) > 0.8:
            self.cronos.create_quantum_backup(
                user_id=user_id,
                data={
                    "query": message_text,
                    "response": response,
                    "analysis": intent_analysis,
                    "timestamp": datetime.now().isoformat()
                },
                description=f"Conversa importante com {user_id}"
            )
        
        # Atualizar m√©tricas
        self.metrics["total_messages"] += 1
        if user_id not in self.metrics["interactions_by_user"]:
            self.metrics["interactions_by_user"][user_id] = 0
        self.metrics["interactions_by_user"][user_id] += 1
        
        # Log de atividade
        self.log_activity(
            "CORE", "MESSAGE_PROCESSED", "COMPLETED",
            f"Message from user {user_id}",
            f"Processed with model {model}",
            None,
            "Resposta gerada com consci√™ncia √©tica e contextual"
        )
    
    def register_handlers(self, application):
        """Registra os handlers para comandos e mensagens."""
        # Comandos b√°sicos
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        
        # Comando de status
        application.add_handler(CommandHandler("status", self.status_command))
        
        # Comandos administrativos
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # Comandos especiais integrados com subsistemas EGOS
        application.add_handler(CommandHandler("ethics", self.ethics_command))
        application.add_handler(CommandHandler("map", self.map_command))
        
        # Handler para mensagens de texto
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Handler para imagens
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # Handler para callbacks de bot√µes
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Handler de erro global
        application.add_error_handler(self.error_handler)
    
    async def status_command(self, update, context):
        """Handler para o comando /status."""
        # Implementa√ß√£o b√°sica
        pass
    
    async def stats_command(self, update, context):
        """Handler para o comando /stats (admin)."""
        # Implementa√ß√£o b√°sica
        pass
    
    async def ethics_command(self, update, context):
        """Handler para o comando /ethics."""
        # Implementa√ß√£o b√°sica
        pass
    
    async def map_command(self, update, context):
        """Handler para o comando /map."""
        # Implementa√ß√£o b√°sica
        pass
    
    async def handle_photo(self, update, context):
        """Handler para mensagens com fotos."""
        # Implementa√ß√£o b√°sica
        pass
    
    async def handle_callback(self, update, context):
        """Handler para callbacks de bot√µes inline."""
        # Implementa√ß√£o b√°sica
        pass
    
    async def error_handler(self, update, context):
        """Handler global de erros."""
        # Implementa√ß√£o b√°sica
        pass
    
    def run(self):
        """Inicia o bot."""
        self.initialize()
        
        application = ApplicationBuilder().token(self.bot_token).build()
        self.register_handlers(application)
        
        self.logger.info("Iniciando polling...")
        application.run_polling()

# Ponto de entrada
if __name__ == "__main__":
    bot = EVAGuaraniBot()
    bot.run()
```

‚úß‡º∫‚ùÄ‡ºª‚àû EVA & GUARANI ‚àû‡º∫‚ùÄ‡ºª‚úß